/* tslint:disable */
/* eslint-disable */
/**
 * News Hook API
 * API for monitoring and alerting on news and content updates
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlertPromptCreateRequestBase,
  AlertPromptCreateSuccessResponse,
  AlertPromptItem,
  AlertPromptListResponse,
  HTTPValidationError,
} from '../models/index';
import {
    AlertPromptCreateRequestBaseFromJSON,
    AlertPromptCreateRequestBaseToJSON,
    AlertPromptCreateSuccessResponseFromJSON,
    AlertPromptCreateSuccessResponseToJSON,
    AlertPromptItemFromJSON,
    AlertPromptItemToJSON,
    AlertPromptListResponseFromJSON,
    AlertPromptListResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CancelAlertApiV1AlertsAlertIdCancelPatchRequest {
    alertId: string;
}

export interface CreateAlertApiV1AlertsPostRequest {
    alertPromptCreateRequestBase: AlertPromptCreateRequestBase;
}

export interface GetAlertApiV1AlertsAlertIdGetRequest {
    alertId: string;
}

export interface ListAlertsApiV1AlertsGetRequest {
    offset?: number;
    limit?: number;
    promptContains?: string | null;
    maxDatetime?: Date | null;
    createdAfter?: Date | null;
    semanticThreshold?: number;
}

/**
 * 
 */
export class AlertsApi extends runtime.BaseAPI {

    /**
     * Cancel an existing alert
     * Cancel Alert
     */
    async cancelAlertApiV1AlertsAlertIdCancelPatchRaw(requestParameters: CancelAlertApiV1AlertsAlertIdCancelPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['alertId'] == null) {
            throw new runtime.RequiredError(
                'alertId',
                'Required parameter "alertId" was null or undefined when calling cancelAlertApiV1AlertsAlertIdCancelPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/api/v1/alerts/{alert_id}/cancel`.replace(`{${"alert_id"}}`, encodeURIComponent(String(requestParameters['alertId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Cancel an existing alert
     * Cancel Alert
     */
    async cancelAlertApiV1AlertsAlertIdCancelPatch(requestParameters: CancelAlertApiV1AlertsAlertIdCancelPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.cancelAlertApiV1AlertsAlertIdCancelPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new alert for monitoring
     * Create Alert
     */
    async createAlertApiV1AlertsPostRaw(requestParameters: CreateAlertApiV1AlertsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertPromptCreateSuccessResponse>> {
        if (requestParameters['alertPromptCreateRequestBase'] == null) {
            throw new runtime.RequiredError(
                'alertPromptCreateRequestBase',
                'Required parameter "alertPromptCreateRequestBase" was null or undefined when calling createAlertApiV1AlertsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/api/v1/alerts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlertPromptCreateRequestBaseToJSON(requestParameters['alertPromptCreateRequestBase']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertPromptCreateSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Create a new alert for monitoring
     * Create Alert
     */
    async createAlertApiV1AlertsPost(requestParameters: CreateAlertApiV1AlertsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertPromptCreateSuccessResponse> {
        const response = await this.createAlertApiV1AlertsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific alert by ID
     * Get Alert
     */
    async getAlertApiV1AlertsAlertIdGetRaw(requestParameters: GetAlertApiV1AlertsAlertIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertPromptItem>> {
        if (requestParameters['alertId'] == null) {
            throw new runtime.RequiredError(
                'alertId',
                'Required parameter "alertId" was null or undefined when calling getAlertApiV1AlertsAlertIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/api/v1/alerts/{alert_id}`.replace(`{${"alert_id"}}`, encodeURIComponent(String(requestParameters['alertId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertPromptItemFromJSON(jsonValue));
    }

    /**
     * Get a specific alert by ID
     * Get Alert
     */
    async getAlertApiV1AlertsAlertIdGet(requestParameters: GetAlertApiV1AlertsAlertIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertPromptItem> {
        const response = await this.getAlertApiV1AlertsAlertIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List alerts for the authenticated user with filtering and pagination
     * List Alerts
     */
    async listAlertsApiV1AlertsGetRaw(requestParameters: ListAlertsApiV1AlertsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertPromptListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['promptContains'] != null) {
            queryParameters['prompt_contains'] = requestParameters['promptContains'];
        }

        if (requestParameters['maxDatetime'] != null) {
            queryParameters['max_datetime'] = (requestParameters['maxDatetime'] as any).toISOString();
        }

        if (requestParameters['createdAfter'] != null) {
            queryParameters['created_after'] = (requestParameters['createdAfter'] as any).toISOString();
        }

        if (requestParameters['semanticThreshold'] != null) {
            queryParameters['semantic_threshold'] = requestParameters['semanticThreshold'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/api/v1/alerts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertPromptListResponseFromJSON(jsonValue));
    }

    /**
     * List alerts for the authenticated user with filtering and pagination
     * List Alerts
     */
    async listAlertsApiV1AlertsGet(requestParameters: ListAlertsApiV1AlertsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertPromptListResponse> {
        const response = await this.listAlertsApiV1AlertsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
