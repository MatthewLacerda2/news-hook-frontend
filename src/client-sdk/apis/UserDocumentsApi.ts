/* tslint:disable */
/* eslint-disable */
/**
 * News Hook API
 * API for monitoring and alerting on news and content updates
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  UserDocumentCreateRequest,
  UserDocumentCreateSuccessResponse,
  UserDocumentItem,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    UserDocumentCreateRequestFromJSON,
    UserDocumentCreateRequestToJSON,
    UserDocumentCreateSuccessResponseFromJSON,
    UserDocumentCreateSuccessResponseToJSON,
    UserDocumentItemFromJSON,
    UserDocumentItemToJSON,
} from '../models/index';

export interface GetUserDocumentApiV1UserDocumentsDocumentIdGetRequest {
    documentId: string;
}

export interface PostUserDocumentApiV1UserDocumentsPostRequest {
    userDocumentCreateRequest: UserDocumentCreateRequest;
}

/**
 * 
 */
export class UserDocumentsApi extends runtime.BaseAPI {

    /**
     * Get a document by ID
     * Get User Document
     */
    async getUserDocumentApiV1UserDocumentsDocumentIdGetRaw(requestParameters: GetUserDocumentApiV1UserDocumentsDocumentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDocumentItem>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling getUserDocumentApiV1UserDocumentsDocumentIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/api/v1/user_documents/{document_id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDocumentItemFromJSON(jsonValue));
    }

    /**
     * Get a document by ID
     * Get User Document
     */
    async getUserDocumentApiV1UserDocumentsDocumentIdGet(requestParameters: GetUserDocumentApiV1UserDocumentsDocumentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDocumentItem> {
        const response = await this.getUserDocumentApiV1UserDocumentsDocumentIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new document
     * Post User Document
     */
    async postUserDocumentApiV1UserDocumentsPostRaw(requestParameters: PostUserDocumentApiV1UserDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDocumentCreateSuccessResponse>> {
        if (requestParameters['userDocumentCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'userDocumentCreateRequest',
                'Required parameter "userDocumentCreateRequest" was null or undefined when calling postUserDocumentApiV1UserDocumentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/api/v1/user_documents/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserDocumentCreateRequestToJSON(requestParameters['userDocumentCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDocumentCreateSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Create a new document
     * Post User Document
     */
    async postUserDocumentApiV1UserDocumentsPost(requestParameters: PostUserDocumentApiV1UserDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDocumentCreateSuccessResponse> {
        const response = await this.postUserDocumentApiV1UserDocumentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
